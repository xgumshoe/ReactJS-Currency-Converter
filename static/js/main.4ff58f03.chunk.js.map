{"version":3,"sources":["CurrencyRow.js","App.js","index.js"],"names":["CurrenyCrow","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","type","className","value","onChange","map","option","BASE_URL","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAEe,SAASA,EAAT,GAMX,IALAC,EAKD,EALCA,gBACAC,EAID,EAJCA,iBACAC,EAGD,EAHCA,iBACAC,EAED,EAFCA,eACAC,EACD,EADCA,OAEA,OACI,gCACI,uBACIC,KAAK,SACLC,UAAU,QACVC,MAAOH,EACPI,SAAUL,IAEd,wBACII,MAAON,EACPO,SAAUN,EAFd,SAKQF,EAAgBS,KAAI,SAAAC,GAAM,OACtB,wBAAqBH,MAAOG,EAA5B,SAAqCA,GAAxBA,WCnBrC,IAAMC,EAAW,yCAuEFC,MArEf,WAAgB,IAQVC,EAAUC,EARD,EACiCC,mBAAS,IAD1C,mBACNf,EADM,KACWgB,EADX,OAE2BD,qBAF3B,mBAENE,EAFM,KAEQC,EAFR,OAGuBH,qBAHvB,mBAGNI,EAHM,KAGMC,EAHN,OAI2BL,qBAJ3B,mBAINM,EAJM,KAIQC,EAJR,OAKeP,mBAAS,GALxB,mBAKNX,EALM,KAKEmB,EALF,OAM2CR,oBAAS,GANpD,mBAMNS,EANM,KAMgBC,EANhB,KA+Cb,OAtCGD,GACDV,EAAaV,EACbS,EAAWT,EAASiB,IAEpBR,EAAWT,EACXU,EAAaV,EAASiB,GAGxBK,qBAAU,WACRC,MAAMhB,GACHiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CnB,EAAmB,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UACnDjB,EAAgBa,EAAKK,MACrBhB,EAAcY,GACdV,EAAgBS,EAAKI,MAAMH,SAE9B,IAEHN,qBAAU,WACW,MAAhBT,GAAsC,MAAdE,GACzBQ,MAAM,GAAD,OAAIhB,EAAJ,iBAAqBM,EAArB,oBAA6CE,IAC/CS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIT,EAAgBS,EAAKI,MAAMhB,SAE5C,CAACF,EAAcE,IAahB,qCACE,yCACA,cAAC,EAAD,CACEnB,gBAAiBA,EACjBC,iBAAkBgB,EAClBf,iBAAkB,SAAAmC,GAAC,OAAInB,EAAgBmB,EAAEC,OAAO/B,QAChDJ,eAjBN,SAAgCkC,GAC9Bd,EAAUc,EAAEC,OAAO/B,OACnBkB,GAAwB,IAgBpBrB,OAAQU,IAEV,qBAAKR,UAAU,SAAf,eACA,cAAC,EAAD,CACEN,gBAAiBA,EACjBC,iBAAkBkB,EAClBjB,iBAAkB,SAAAmC,GAAC,OAAIjB,EAAciB,EAAEC,OAAO/B,QAC9CJ,eApBN,SAA8BkC,GAC5Bd,EAAUc,EAAEC,OAAO/B,OACnBkB,GAAwB,IAmBpBrB,OAAQS,QCjEhB0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4ff58f03.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function CurrenyCrow({ \r\n    currencyOptions, \r\n    selectedCurrency, \r\n    onChangeCurrency, \r\n    onChangeAmount, \r\n    amount \r\n}) {\r\n    return (\r\n        <div>\r\n            <input \r\n                type=\"number\" \r\n                className=\"input\" \r\n                value={amount} \r\n                onChange={onChangeAmount} \r\n            />\r\n            <select \r\n                value={selectedCurrency} \r\n                onChange={onChangeCurrency}\r\n            >\r\n                {\r\n                    currencyOptions.map(option => (\r\n                        <option key={option} value={option}>{option}</option>\r\n                    ))\r\n                }\r\n            </select>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport CurrencyRow from './CurrencyRow'\n\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest'\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [fromCurrency, setFromCurrency] = useState()\n  const [toCurrency, setToCurrency] = useState()\n  const [exchangeRate, setExchangeRate] = useState()\n  const [amount, setAmount] = useState(1)\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\n\n  let toAmount, fromAmount\n  if(amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  } else {\n    toAmount = amount\n    fromAmount = amount / exchangeRate\n  }\n\n  useEffect(() => {\n    fetch(BASE_URL)\n      .then(res => res.json())\n      .then(data => {\n        const firstCurrency = Object.keys(data.rates)[0]\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)])\n        setFromCurrency(data.base)\n        setToCurrency(firstCurrency)\n        setExchangeRate(data.rates[firstCurrency])\n      } )\n  }, [])\n\n  useEffect(() => {\n    if(fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setExchangeRate(data.rates[toCurrency]))\n    }\n  }, [fromCurrency, toCurrency])\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n\n  return (\n    <>\n      <h1>Convert</h1>\n      <CurrencyRow \n        currencyOptions={currencyOptions}\n        selectedCurrency={fromCurrency}\n        onChangeCurrency={e => setFromCurrency(e.target.value)}\n        onChangeAmount={handleFromAmountChange}\n        amount={fromAmount}\n      />\n      <div className=\"equals\">=</div>\n      <CurrencyRow \n        currencyOptions={currencyOptions}\n        selectedCurrency={toCurrency}\n        onChangeCurrency={e => setToCurrency(e.target.value)}\n        onChangeAmount={handleToAmountChange}\n        amount={toAmount}\n      />\n    </>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}